{"version":3,"sources":["events.js"],"names":[],"mappingsfile":"events.js","sourcesContent":["var clientId = '77587040839-8rh5g1dbhbur1hpmao2f5dgc0256dj27.apps.googleusercontent.com';\r\nvar apiKey = 'AIzaSyCRP13syzKkOemWXKA3wXi1_bJsj_Fe3c0';\r\nvar userTimeZone = \"Zurich\";\r\nvar maxRows = 1000;\r\n\r\nvar scopes = 'https://www.googleapis.com/auth/calendar';\r\n\r\nvar events=[];\r\nvar calendarsParsed = 0;\r\n\r\n// Add a 0 to numbers\r\nfunction padNum(num) {\r\n    if (num <= 9) {\r\n        return \"0\" + num;\r\n    }\r\n    return num;\r\n}\r\n\r\n// num Month to String\r\nfunction monthString(num) {\r\n    if (num === \"01\") { return \"Januar\"; }\r\n    else if (num === \"02\") { return \"Februar\"; }\r\n    else if (num === \"03\") { return \"MÃ¤rz\"; }\r\n    else if (num === \"04\") { return \"April\"; }\r\n    else if (num === \"05\") { return \"Mai\"; }\r\n    else if (num === \"06\") { return \"Juni\"; }\r\n    else if (num === \"07\") { return \"Juli\"; }\r\n    else if (num === \"08\") { return \"August\"; }\r\n    else if (num === \"09\") { return \"September\"; }\r\n    else if (num === \"10\") { return \"Oktober\"; }\r\n    else if (num === \"11\") { return \"November\"; }\r\n    else if (num === \"12\") { return \"Dezember\"; }\r\n}\r\n\r\n// from num to day of week\r\nfunction dayString(num){\r\n    if (num == \"1\") { return \"Montag\" }\r\n    else if (num == \"2\") { return \"Dienstag\" }\r\n    else if (num == \"3\") { return \"Mittwoch\" }\r\n    else if (num == \"4\") { return \"Donnerstag\" }\r\n    else if (num == \"5\") { return \"Freitag\" }\r\n    else if (num == \"6\") { return \"Samstag\" }\r\n    else if (num == \"0\") { return \"Sonntag\" }\r\n}\r\n\r\n// client CALL\r\nfunction handleClientLoad() {\r\n    gapi.client.setApiKey(apiKey);\r\n    checkAuth();\r\n}\r\n\r\n// check Auth\r\nfunction checkAuth() {\r\n    gapi.auth.authorize({client_id: clientId, scope: scopes, immediate: true}, handleAuthResult);\r\n}\r\n\r\n// handle result and make CALL\r\nfunction handleAuthResult(authResult) {\r\n    if (authResult) {\r\n        makeApiCall();\r\n    }\r\n}\r\n\r\nfunction makeApiCall() {\r\n\r\n    var today = new Date(); //today date\r\n    gapi.client.load('calendar', 'v3', function () {\r\n        for (var c = 0; c < calendar.length; c++) {\r\n            var request = gapi.client.calendar.events.list({\r\n                'calendarId' : calendar[c],\r\n                'timeZone' : userTimeZone,\r\n                'singleEvents': true,\r\n                'timeMin': today.toISOString(), //gathers only events not happened yet\r\n                'maxResults': maxRows,\r\n                'orderBy': 'startTime'});\r\n            request.execute(function (resp) {\r\n                for (var i = 0; i < resp.items.length; i++) {\r\n                    var item = resp.items[i];\r\n                    var allDay = item.start.date? true : false;\r\n\r\n                    var startDT = allDay ? item.start.date : item.start.dateTime;\r\n                    var startDateTime = startDT.split(\"T\"); //split date from time\r\n                    var startDate = startDateTime[0].split(\"-\"); //split yyyy mm dd\r\n                    var startYear = startDate[0];\r\n                    var startMonth = monthString(startDate[1]);\r\n                    var startDay = startDate[2];\r\n                    var startDateISO = new Date(startDate[1] + \" \" + startDay + \", \" + startYear + \" 00:00:00\");\r\n                    var startDayWeek = dayString(startDateISO.getDay());\r\n\r\n                    var endDT = allDay ? item.end.date : item.end.dateTime;\r\n                    var endDateTime = endDT.split(\"T\"); //split date from time\r\n                    var endDate = endDateTime[0].split(\"-\"); //split yyyy mm dd\r\n                    var endYear = endDate[0];\r\n                    var endMonth = monthString(endDate[1]);\r\n                    var endDay = endDate[2];\r\n                    var endDateISO = new Date(endDate[1] + \" \" + endDay + \", \" + endYear + \" 00:00:00\");\r\n                    var endDayWeek = dayString(endDateISO.getDay());\r\n\r\n                    var startHour = 0;\r\n                    var startMin = 0;\r\n                    var endHour = 0;\r\n                    var endMin = 0;\r\n                    var startDateTimeStructured=0;\r\n                    var endDateTimeStructured=0;\r\n                    if( allDay == true){\r\n                        // all day Events\r\n                        startDateTimeStructured = startYear+'-'+startDate[1]+'-'+startDay;\r\n                        endDateTimeStructured = endYear+'-'+endDate[1]+'-'+endDay;\r\n                    }\r\n                    else{\r\n                        var startTime = startDateTime[1].split(\":\"); //split hh ss etc...\r\n                        var endTime = endDateTime[1].split(\":\"); //split hh ss etc...\r\n                        startHour = startTime[0];\r\n                        startMin = startTime[1];\r\n                        endHour = endTime[0];\r\n                        endMin = endTime[1];\r\n                        startDateTimeStructured = startYear+'-'+startDate[1]+'-'+startDay+'T'+startHour+':'+startMin;\r\n                        endDateTimeStructured = endYear+'-'+endDate[1]+'-'+endDay+'T'+endHour+':'+endMin;\r\n                    }\r\n\r\n                    var calType = calendarType[calendar.indexOf(item.organizer.email)]; // get CalendarType (webpro/public) based on CalID (workaround because of async call)\r\n\r\n\r\n\r\n                    //push into events array\r\n                    events.push({\r\n                        title:item.summary,\r\n                        location:item.location,\r\n                        hangoutLink:item.hangoutLink,\r\n                        htmlLink:item.htmlLink,\r\n                        description:item.description,\r\n                        summary:item.summary,\r\n\r\n                        startDayWeek:startDayWeek,\r\n                        startDay:startDay,\r\n                        startMonth:startMonth,\r\n                        startYear:startYear,\r\n                        startHour:startHour,\r\n                        startMin:startMin,\r\n                        startDateTimeStructured:startDateTimeStructured,\r\n                        startDate:startDate,\r\n\r\n                        endDayWeek:endDayWeek,\r\n                        endDay:endDay,\r\n                        endMonth:endMonth,\r\n                        endYear:endYear,\r\n                        endHour:endHour,\r\n                        endMin:endMin,\r\n                        endDateTimeStructured:endDateTimeStructured,\r\n\r\n                        allDay:allDay,\r\n\r\n                        calType:calType\r\n                    });\r\n                }\r\n                calendarDone();\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n}\r\n\r\nfunction calendarDone() {\r\n    calendarsParsed++;\r\n\r\n    if (calendarsParsed == calendar.length) {\r\n        events.sort(function(a, b){\r\n            var dateA=new Date(a.startDate), dateB=new Date(b.startDate);\r\n            return dateA-dateB;\r\n        });\r\n        drawCards(events);\r\n    }\r\n}\r\n\r\nfunction drawCards(events) {\r\n\r\n    $('#calendar-loading').hide();\r\n    var card = $('.card-event');\r\n    var materialicon;\r\n    var datumStart;\r\n    var datumEnde;\r\n    for (var i = 0; i < events.length; i++) {\r\n\r\n        var cardClone = card.clone();\r\n        var summary = events[i].summary;\r\n        var location = events[i].location;\r\n\r\n        // create location link\r\n        if (location) {\r\n            location = '<a href=\"http://maps.google.com/?q='+location+'\" target=\"_blank\">'+location+' <i class=\"material-icons tiny\">place</i></a>';\r\n        } else {\r\n            location = '';\r\n        }\r\n\r\n        // get Type of Events\r\n        if (events[i].calType=='webpro') {\r\n            materialicon = 'school';\r\n            cardClone.find('.card').addClass('webpro-green z-depth-2');\r\n            cardClone.find('.card-content').addClass('white-text');\r\n            cardClone.find('a').addClass('white-text');\r\n        } else {\r\n            materialicon = 'date_range';\r\n        }\r\n\r\n        // do allDay specific things\r\n        if( events[i].allDay == true){\r\n            cardClone.find('.card-events-time').html('ganzer Tag');\r\n        }\r\n        else{\r\n            cardClone.find('.card-events-time').html(events[i].startHour+':'+events[i].startMin+' - '+events[i].endHour+':'+events[i].endMin+' Uhr');\r\n        }\r\n\r\n        // date thing\r\n        if((events[i].startDay!=events[i].endDay)) {\r\n            // start/end not the same day\r\n            datumStart = events[i].startDay+'. '+events[i].startMonth+' '+events[i].startYear+' - ';\r\n            datumEnde = events[i].endDay+'. '+events[i].endMonth+' '+events[i].endYear+'<br>';\r\n            cardClone.find('.card-events-enddate').html(datumEnde);\r\n            cardClone.find('.card-events-startdate').attr(\"content\", events[i].startDateTimeStructured);\r\n            cardClone.find('.card-events-enddate').attr(\"content\", events[i].endDateTimeStructured);\r\n        } else {\r\n            // same day\r\n            datumStart = events[i].startDay+'. '+events[i].startMonth+' '+events[i].startYear;\r\n            cardClone.find('.card-events-startdate').attr(\"content\", events[i].startDateTimeStructured);\r\n            cardClone.find('.card-events-enddate').attr(\"content\", events[i].endDateTimeStructured);\r\n            cardClone.find('.card-events-enddate').hide();\r\n        }\r\n        cardClone.find('.card-events-startdate').html(datumStart);\r\n\r\n        cardClone.find('.card-events-day').html(events[i].startDayWeek);\r\n        cardClone.find('.card-events-title').html(summary);\r\n        cardClone.find('.card-events-location').html(location);\r\n        cardClone.find('.card-icon').html(materialicon);\r\n\r\n        // create link button if available\r\n        var desc = events[i].description;\r\n        if ( desc=='' || desc == null ) {\r\n            cardClone.find('.card-action').hide();\r\n        } else if (desc.substring(0, 4)==\"http\") {\r\n            cardClone.find('.card-action a').attr(\"href\", events[i].description);\r\n            if (desc.indexOf('web-professionals.ch') !== -1) {\r\n                cardClone.find('.card-action a').attr(\"target\", '_self');\r\n            }\r\n        } else {\r\n            cardClone.find('.card-action').hide();\r\n            cardClone.find('.card-events-title').html(summary+'<br>'+events[i].description);\r\n        }\r\n\r\n        cardClone.removeClass('card-invisible').addClass('card-visible');\r\n        cardClone.appendTo('.card-events');\r\n    }\r\n}"],"sourceRoot":"/source/"}